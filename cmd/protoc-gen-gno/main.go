package main

import (
	"path/filepath"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateGnoMod(gen, f)
			generateFile(gen, f)
			generateJSONMarshaller(gen, f)
		}
		return nil
	})
}

func generateGnoMod(gen *protogen.Plugin, file *protogen.File) {
	dir := filepath.Join("p", filepath.Dir(file.GeneratedFilenamePrefix))
	filename := filepath.Join(dir, "gno.mod")
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-gno. DO NOT EDIT.")
	g.P()
	g.P("module ", "gno.land/"+filepath.ToSlash(dir))
	g.P()
}

func generateFile(gen *protogen.Plugin, file *protogen.File) {
	filename := filepath.Join("p", file.GeneratedFilenamePrefix) + ".pb.gno"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-gno. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)

	for _, m := range file.Messages {
		g.P()

		typeName := m.Desc.Name()

		g.P("type ", typeName, " struct {")
		for _, f := range m.Fields {
			if f.Oneof != nil {
				continue
			}
			gnoType, _ := fieldGnoType(g, f)
			g.P("	", f.GoName, " ", gnoType)
		}
		for _, o := range m.Oneofs {
			g.P("	", o.GoName, " interface{}")
		}
		g.P("}")
	}
}

func generateJSONMarshaller(gen *protogen.Plugin, file *protogen.File) {
	filename := filepath.Join("p", file.GeneratedFilenamePrefix) + "_json.pb.gno"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-gno. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	g.P("import (")
	g.P(`	"errors"`)
	g.P(`	"strconv"`)
	g.P(`	"gno.land/p/demo/json"`)
	g.P(")")

	for _, m := range file.Messages {
		g.P()

		typeName := m.Desc.Name()

		receiver := strings.ToLower(string(typeName[0]))
		g.P("func (", receiver, " *", typeName, ") ToJSON() *json.Node {")
		g.P(`	fields := map[string]*json.Node{}`)
		for _, f := range m.Fields {
			fieldToJSON("fields", "	", g, f)
		}
		for _, f := range m.Oneofs {
			oneOfToJSON("fields", "	", g, f)
		}
		g.P(`	return json.ObjectNode("", fields)`)
		g.P("}")
	}
}
