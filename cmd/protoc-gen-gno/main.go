package main

import (
	"fmt"
	"path/filepath"
	"strconv"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateGnoMod(gen, f)
			generateFile(gen, f)
			generateJSONUtils(gen, f)
		}
		return nil
	})
}

func generateGnoMod(gen *protogen.Plugin, file *protogen.File) {
	dir := filepath.Join("p", filepath.Dir(file.GeneratedFilenamePrefix))
	filename := filepath.Join(dir, "gno.mod")
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-gno. DO NOT EDIT.")
	g.P()
	g.P("module ", "gno.land/p/zenao/"+filepath.ToSlash(filepath.Dir(file.GeneratedFilenamePrefix)))
}

func generateFile(gen *protogen.Plugin, file *protogen.File) {
	filename := filepath.Join("p", file.GeneratedFilenamePrefix) + ".pb.gno"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-gno. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)

	g.P("import (")
	genImportStmts(gen, g, file)
	g.P(")")

	for _, en := range file.Enums {
		g.P()

		typeName := en.Desc.Name()

		g.P("type ", typeName, " uint32")
		g.P()
		g.P("const (")
		for _, ca := range en.Values {
			g.P("	", ca.Desc.Name(), " = ", en.GoIdent.GoName, "(", ca.Desc.Index(), ")")
		}
		g.P(")")

		g.P("func ", typeName, "FromString(str string) ", typeName, " {")
		g.P("	switch str {")
		for _, va := range en.Values {
			//gnoType, _ := fieldGnoType(g, va)
			g.P("	case ", strconv.Quote(string(va.Desc.Name())), ":")
			g.P(`		return `, va.Desc.Name())
		}
		g.P("	default:")
		g.P(`		panic(errors.New("unknown variant " + str))`)
		g.P("	}")
		g.P("}")

		g.P("")

		g.P("func (e " + typeName + ") ToString() string {")
		g.P("	switch e {")
		for _, va := range en.Values {
			//gnoType, _ := fieldGnoType(g, va)
			g.P("	case ", va.Desc.Name(), ":")
			g.P(`		return `, strconv.Quote(string(va.Desc.Name())))
		}
		g.P("	default:")
		g.P(`		panic(errors.New("unknown variant"))`)
		g.P("	}")
		g.P("}")
	}

	for _, m := range file.Messages {
		g.P()

		typeName := m.Desc.Name()

		g.P("type ", typeName, " struct {")
		for _, f := range m.Fields {
			if f.Oneof != nil {
				continue
			}
			gnoType, _ := fieldGnoType(g, f)
			g.P("	", f.GoName, " ", gnoType)
		}
		for _, o := range m.Oneofs {
			g.P("	", o.GoName, " interface{}")
		}
		g.P("}")
	}
}

func generateJSONUtils(gen *protogen.Plugin, file *protogen.File) {
	filename := filepath.Join("p", file.GeneratedFilenamePrefix) + "_json.pb.gno"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-gno. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	g.P("import (")
	g.P(`	"errors"`)
	g.P(`	"strconv"`)
	g.P(`	"gno.land/p/demo/json"`)
	genImportStmts(gen, g, file)
	g.P(")")

	for _, m := range file.Messages {
		g.P()

		typeName := m.Desc.Name()

		receiver := strings.ToLower(string(typeName[0]))
		g.P("func (", receiver, " *", typeName, ") ToJSON() *json.Node {")
		g.P(`	fields := map[string]*json.Node{}`)
		if len(m.Fields) != 0 {
			g.P()
		}
		for _, f := range m.Fields {
			fieldToJSON("fields", "	", g, f)
		}
		for _, f := range m.Oneofs {
			g.P()
			oneOfToJSON("fields", "	", g, f)
		}
		g.P()
		g.P(`	return json.ObjectNode("", fields)`)
		g.P("}")

		g.P()

		g.P("func (", receiver, " *", typeName, ") FromJSON(node *json.Node) {")
		fmt.Fprintf(g, "	*%s = %s{}\n", receiver, typeName)
		if len(m.Fields) != 0 || len(m.Oneofs) != 0 {
			fmt.Fprintf(g, "	fields := node.MustObject()\n")
		}
		if len(m.Fields) != 0 {
			g.P()
		}
		for _, f := range m.Fields {
			fieldFromJSON("	", g, f)
		}

		for _, f := range m.Oneofs {
			g.P()
			oneOfFromJSON("fields", "	", g, f)
		}
		g.P("}")
	}
}

// TODO: fork proto gen go into a clean proto gen gno instead of this
func genImportStmts(gen *protogen.Plugin, g *protogen.GeneratedFile, file *protogen.File) {
	for i, imps := 0, file.Desc.Imports(); i < imps.Len(); i++ {
		imp := imps.Get(i)
		impFile, ok := gen.FilesByPath[imp.Path()]
		if !ok {
			continue
		}

		alias := g.QualifiedGoIdent(impFile.GoImportPath.Ident(""))
		alias = strings.TrimSuffix(alias, ".")
		prefix := filepath.ToSlash(filepath.Dir(impFile.GeneratedFilenamePrefix))
		g.P("	", alias, " ", `"gno.land/p/zenao/`, prefix, `"`)
	}
}
