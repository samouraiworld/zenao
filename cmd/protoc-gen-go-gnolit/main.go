package main

import (
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateGnoLit(gen, f)
		}
		return nil
	})
}

func generateGnoLit(gen *protogen.Plugin, file *protogen.File) {
	filename := file.GeneratedFilenamePrefix + "_gnolit.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-gnolit. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	g.P("import (")
	g.P(`	"strings"`)
	g.P(`	"fmt"`)
	g.P(`	"errors"`)
	g.P(")")

	for _, m := range file.Messages {
		g.P()

		typeName := m.Desc.Name()

		receiver := strings.ToLower(string(typeName[0]))
		g.P("func (", receiver, " *", typeName, ") GnoLiteral(typePrefix string, linePrefix string) string {")
		g.P("	buf := &strings.Builder{}")
		g.P(`	buf.WriteString(typePrefix)`)
		g.P(`	buf.WriteString("`, typeName, `{\n")`)
		for _, f := range m.Fields {
			fieldToLit("	", g, f)
		}
		for _, f := range m.Oneofs {
			oneOfToLit("	", g, f)
		}
		g.P(`	buf.WriteString(linePrefix)`)
		g.P(`	buf.WriteString("}")`)
		g.P(`	return buf.String()`)
		g.P("}")
	}
}
