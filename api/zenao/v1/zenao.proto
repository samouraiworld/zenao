syntax = "proto3";

package zenao.v1;
option go_package = "github.com/samouraiworld/zenao/backend/zenao/v1;zenaov1";

import "polls/v1/polls.proto";

service ZenaoService {
  // USER
  rpc EditUser(EditUserRequest) returns (EditUserResponse);
  rpc GetUserAddress(GetUserAddressRequest) returns (GetUserAddressResponse);

  // EVENT
  rpc CreateEvent(CreateEventRequest) returns (CreateEventResponse);
  rpc EditEvent(EditEventRequest) returns (EditEventResponse);
  rpc GetEventGatekeepers(GetEventGatekeepersRequest)
      returns (GetEventGatekeepersResponse);
  rpc ValidatePassword(ValidatePasswordRequest)
      returns (ValidatePasswordResponse);
  rpc BroadcastEvent(BroadcastEventRequest) returns (BroadcastEventResponse);
  rpc Participate(ParticipateRequest) returns (ParticipateResponse);
  rpc CancelParticipation(CancelParticipationRequest)
      returns (CancelParticipationResponse);
  rpc GetEventTickets(GetEventTicketsRequest) returns (GetEventTicketsResponse);
  rpc Checkin(CheckinRequest) returns (CheckinResponse);
  rpc ExportParticipants(ExportParticipantsRequest)
      returns (ExportParticipantsResponse);

  // COMMUNITY
  rpc CreateCommunity(CreateCommunityRequest) returns (CreateCommunityResponse);

  // FEED
  rpc CreatePoll(CreatePollRequest) returns (CreatePollResponse);
  rpc VotePoll(VotePollRequest) returns (VotePollResponse);
  rpc CreatePost(CreatePostRequest) returns (CreatePostResponse);
  rpc DeletePost(DeletePostRequest) returns (DeletePostResponse);
  rpc ReactPost(ReactPostRequest) returns (ReactPostResponse);
  rpc EditPost(EditPostRequest) returns (EditPostResponse);

  // HEALTH
  rpc Health(HealthRequest) returns (HealthResponse);
}

message HealthRequest {}

// XXX: add more fields (e.g. version, commit_hash, gno.land version, ...)
message HealthResponse { bool maintenance = 1; }

message EditUserRequest {
  string display_name = 1;
  string bio = 2;
  string avatar_uri = 3;
}

message EditUserResponse { string id = 1; }

message GetUserAddressRequest {}

message GetUserAddressResponse { string address = 1; }

message CreateEventRequest {
  string title = 1;
  string description = 2; // markdown
  string image_uri = 3;
  uint64 start_date = 4;   // unix seconds
  uint64 end_date = 5;     // unix seconds
  double ticket_price = 6; // XXX: use fixed point?
  uint32 capacity = 7;
  EventLocation location = 9;
  string password = 10;
  repeated string organizers = 11;
  repeated string gatekeepers = 12;
}

message CreateEventResponse { string id = 1; }

message EditEventRequest {
  string event_id = 1;
  string title = 2;
  string description = 3; // markdown
  string image_uri = 4;
  uint64 start_date = 5;   // unix seconds
  uint64 end_date = 6;     // unix seconds
  double ticket_price = 7; // XXX: use fixed point?
  uint32 capacity = 8;
  EventLocation location = 9;
  string password = 10;
  bool update_password = 11;
  repeated string organizers = 12;
  repeated string gatekeepers = 13;
}

message EditEventResponse { string id = 1; }

message GetEventGatekeepersRequest { string event_id = 1; }

message GetEventGatekeepersResponse { repeated string gatekeepers = 1; }

message ValidatePasswordRequest {
  string event_id = 1;
  string password = 2;
}

message ValidatePasswordResponse { bool valid = 1; }

message ParticipateRequest {
  string event_id = 1;
  string email = 2;
  repeated string guests = 3;
  string password = 4;
}

message CancelParticipationRequest { string event_id = 1; }

message CancelParticipationResponse {}

message ParticipateResponse { string ticket_secret = 1; }

message BroadcastEventRequest {
  string event_id = 1;
  string message = 2;
  bool attach_ticket = 3;
}

message BroadcastEventResponse {}

message EventLocation {
  string venue_name = 1;
  string instructions = 2; // markdown
  oneof address {
    AddressGeo geo = 3;
    AddressVirtual virtual = 4;
    AddressCustom custom = 5;
  }
}

message AddressVirtual { string uri = 1; }

message AddressGeo {
  string address = 1;
  float lat = 2;
  float lng = 3;
  float size = 4;
}

message AddressCustom {
  string address = 1;
  string timezone = 2; // IANA name
}

message EventPrivacy {
  oneof event_privacy {
    EventPrivacyPublic public = 1;
    EventPrivacyGuarded guarded = 2;
  }
}

message EventPrivacyPublic {}

message EventPrivacyGuarded { string participation_pubkey = 1; }

message EventInfo {
  string title = 1;
  string description = 2;
  string image_uri = 3;
  repeated string organizers = 4;
  repeated string gatekeepers = 5;
  int64 start_date = 6; // unix seconds
  int64 end_date = 7;   // unix seconds
  uint32 capacity = 8;
  EventLocation location = 9;
  uint32 participants = 10;
  string pkg_path = 11;
  EventPrivacy privacy = 12;
  uint32 checked_in = 13;
}

message BatchProfileField {
  string type = 1;
  string key = 2;
}

message BatchProfileRequest {
  repeated BatchProfileField fields = 1;
  repeated string addresses = 2;
}

message CreatePollRequest {
  string org_type = 1; // one of: event, community
  string org_id = 2;
  string question = 3;
  repeated string options = 4;
  int64 duration = 5; // unix seconds
  polls.v1.PollKind kind = 6;
}

message CreatePollResponse { string post_id = 1; }

message VotePollRequest {
  string poll_id = 1;
  string option = 2;
}

message VotePollResponse {}

message CreatePostRequest {
  string org_type = 1; // one of: event, community
  string org_id = 2;
  string content = 3;
  string parent_id = 4;
  repeated string tags = 5;
}

message CreatePostResponse { string post_id = 1; }

message DeletePostRequest { string post_id = 1; }

message DeletePostResponse {}

message ReactPostRequest {
  string post_id = 1;
  string icon = 2;
}

message ReactPostResponse {}

message EditPostRequest {
  string post_id = 1;
  string content = 2;
  repeated string tags = 3;
}

message EditPostResponse { string post_id = 1; }

message GetEventTicketsRequest { string event_id = 1; }

message GetEventTicketsResponse { repeated TicketInfo tickets_info = 1; }

message TicketInfo {
  string ticket_secret = 1;
  string user_email = 2;
}

message CheckinRequest {
  string ticket_pubkey = 1;
  string signature = 2;
}

message CheckinResponse {}

message ExportParticipantsRequest { string event_id = 1; }

message ExportParticipantsResponse {
  // XXX: cannot use bytes because not handled in gno-protoc-gen
  string content = 1;
  string filename = 2;
  // XXX: use this to change the mime type without re-generating the proto
  string mime_type = 3;
}

message CommunityInfo {
  string display_name = 1;
  string description = 2;
  string avatar_uri = 3;
  string banner_uri = 4;
  repeated string administrators = 5;
  uint32 count_members = 6;
  string pkg_path = 7;
}

message CreateCommunityRequest {
  string display_name = 1;
  string description = 2;
  string avatar_uri = 3;
  string banner_uri = 4;
  repeated string administrators = 5;
}

message CreateCommunityResponse { string community_id = 1; }