syntax = "proto3";

package zenao.v1;
option go_package = "github.com/samouraiworld/zenao/backend/zenao/v1;zenaov1";

service ZenaoService {
  // USER
  rpc EditUser(EditUserRequest) returns (EditUserResponse);
  rpc GetUserAddress(GetUserAddressRequest) returns (GetUserAddressResponse);

  // EVENT
  rpc CreateEvent(CreateEventRequest) returns (CreateEventResponse);
  rpc EditEvent(EditEventRequest) returns (EditEventResponse);
  rpc Participate(ParticipateRequest) returns (ParticipateResponse);
}

message EditUserRequest {
  string display_name = 1;
  string bio = 2;
  string avatar_uri = 3;
}

message EditUserResponse { string id = 1; }

message GetUserAddressRequest {}

message GetUserAddressResponse { string address = 1; }

message CreateEventRequest {
  string title = 1;
  string description = 2; // markdown
  string image_uri = 3;
  uint64 start_date = 4;   // unix seconds
  uint64 end_date = 5;     // unix seconds
  double ticket_price = 6; // XXX: use fixed point?
  uint32 capacity = 7;
  EventLocation location = 9;
}

message CreateEventResponse { string id = 1; }

message EditEventRequest {
  string event_id = 1;
  string title = 2;
  string description = 3; // markdown
  string image_uri = 4;
  uint64 start_date = 5;   // unix seconds
  uint64 end_date = 6;     // unix seconds
  double ticket_price = 7; // XXX: use fixed point?
  uint32 capacity = 8;
  EventLocation location = 10;
}

message EditEventResponse { string id = 1; }

message ParticipateRequest {
  string event_id = 1;
  string email = 2;
}

message ParticipateResponse { string ticket_secret = 1; }

message EventLocation {
  string venue_name = 1;
  string instructions = 2; // markdown
  oneof address {
    AddressGeo geo = 3;
    AddressVirtual virtual = 4;
    AddressCustom custom = 5;
  }
}

message AddressVirtual { string uri = 1; }

message AddressGeo {
  string address = 1;
  float lat = 2;
  float lng = 3;
  float size = 4;
}

message AddressCustom {
  string address = 1;
  string timezone = 2; // IANA name
}

message EventInfo {
  string title = 1;
  string description = 2;
  string image_uri = 3;
  string creator = 4;
  int64 start_date = 5; // unix seconds
  int64 end_date = 6;   // unix seconds
  uint32 capacity = 7;
  EventLocation location = 8;
  uint32 participants = 9;
  string pkg_path = 10;
}

message BatchProfileField {
  string type = 1;
  string key = 2;
}

message BatchProfileRequest {
  repeated BatchProfileField fields = 1;
  repeated string addresses = 2;
}

// SOCIAL FEED

// not directly used in link post type, but should be used as return value of
// Kind() method of contract set in a link post
enum LinkPostKind {
  LINK_POST_KIND_UNSPECIFIED = 0;
  LINK_POST_KIND_POLL = 1;
  LINK_POST_KIND_EVENT = 2;
  LINK_POST_KIND_PROPOSAL = 3;
}

message PostGeoLoc {
  float lat = 2;
  float lng = 3;
}

message PostID {
  string local_id = 1; // indexed by feed_id e.g "feed_id:local_post_id"
  string feed_id = 2;  // mainly a contract of social feed factory
  string network_id = 3;
}

message StandardPost { string content = 1; }

message ArticlePost {
  string title = 1;
  string preview_text = 2;
  string preview_image_uri = 3;
  string content = 4;
}

message LinkPost { string uri = 1; }

message ImagePost {
  string description = 1;
  string image_uri = 2;
}

message VideoPost {
  string description = 1;
  string video_uri = 2;
  string thumbnail_image_uri = 3;
}

message Reaction {
  PostID post_id = 1;
  string icon = 2;
  string user_id = 3;
}

// Only on local chaine from the related post
message Tip {
  string post_local_id = 1;
  string denom = 3;
  int64 amount = 4; // XXX: use string encoding?
}

message Post {
  string channel_id = 1;
  string author = 2;
  PostID parent_id = 3;
  PostGeoLoc loc = 4;
  // XXX: map any extentions = 10;

  int64 created_at = 5;
  int64 updated_at = 6;
  int64 deleted_at = 7; // if != 0 -> deleted

  oneof post {
    StandardPost standard = 8;
    ArticlePost article = 9;
    LinkPost link = 10;
    ImagePost image = 11;
    VideoPost video = 12;
  }
}

// contains the authorization layer, each DAO has its own feed but could have
// multiple feeds
message SocialFeed { string id = 1; }
