// Code generated by protoc-gen-gno. DO NOT EDIT.

package pollsv1

import (
	"strconv"

	"gno.land/p/demo/json"
)

func (p *PollResult) ToJSON() *json.Node {
	fields := map[string]*json.Node{}

	if p.Option != "" {
		fields["option"] = json.StringNode("", p.Option)
	}
	if p.Count != 0 {
		fields["count"] = json.NumberNode("", float64(p.Count))
	}
	if p.HasUserVoted != false {
		fields["hasUserVoted"] = json.BoolNode("", p.HasUserVoted)
	}

	return json.ObjectNode("", fields)
}

func (p *PollResult) FromJSON(node *json.Node) {
	*p = PollResult{}
	fields := node.MustObject()

	if val, ok := fields["option"]; ok {
		p.Option = val.MustString()
	}
	if val, ok := fields["count"]; ok {
		p.Count = uint32(val.MustNumeric())
	}
	if val, ok := fields["hasUserVoted"]; ok {
		p.HasUserVoted = val.MustBool()
	}
}

func (p *Poll) ToJSON() *json.Node {
	fields := map[string]*json.Node{}

	if p.Question != "" {
		fields["question"] = json.StringNode("", p.Question)
	}
	if len(p.Results) != 0 {
		arr := make([]*json.Node, len(p.Results))
		for i, val := range p.Results {
			arr[i] = val.ToJSON()
		}
		fields["results"] = json.ArrayNode("", arr)
	}
	if p.Kind != 0 {
		fields["kind"] = json.StringNode("", p.Kind.ToString())
	}
	if p.Duration != 0 {
		fields["duration"] = json.StringNode("", strconv.FormatInt(p.Duration, 10))
	}
	if p.CreatedAt != 0 {
		fields["createdAt"] = json.StringNode("", strconv.FormatInt(p.CreatedAt, 10))
	}
	if p.CreatedBy != "" {
		fields["createdBy"] = json.StringNode("", p.CreatedBy)
	}

	return json.ObjectNode("", fields)
}

func (p *Poll) FromJSON(node *json.Node) {
	*p = Poll{}
	fields := node.MustObject()

	if val, ok := fields["question"]; ok {
		p.Question = val.MustString()
	}
	if val, ok := fields["results"]; ok {
		jarr := val.MustArray()
		arr := make([]*PollResult, len(jarr))
		for i, val := range jarr {
			fv := &PollResult{}
			fv.FromJSON(val)
			arr[i] = fv
		}
		p.Results = arr
	}
	if val, ok := fields["kind"]; ok {
		p.Kind = PollKindFromString(val.MustString())
	}
	if val, ok := fields["duration"]; ok {
		fv, err := strconv.ParseInt(val.MustString(), 10, 64)
		if err != nil {
			panic(err)
		}
		p.Duration = fv
	}
	if val, ok := fields["createdAt"]; ok {
		fv, err := strconv.ParseInt(val.MustString(), 10, 64)
		if err != nil {
			panic(err)
		}
		p.CreatedAt = fv
	}
	if val, ok := fields["createdBy"]; ok {
		p.CreatedBy = val.MustString()
	}
}
