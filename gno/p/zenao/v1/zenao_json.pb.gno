// Code generated by protoc-gen-gno. DO NOT EDIT.

package zenaov1

import (
	"errors"
	"strconv"
	"gno.land/p/demo/json"
)

func (e *EditUserRequest) ToJSON() *json.Node {
	fields := map[string]*json.Node{}
	fields["displayName"] = json.StringNode("", e.DisplayName)
	fields["bio"] = json.StringNode("", e.Bio)
	fields["avatarUri"] = json.StringNode("", e.AvatarUri)
	return json.ObjectNode("", fields)
}

func (e *EditUserResponse) ToJSON() *json.Node {
	fields := map[string]*json.Node{}
	fields["id"] = json.StringNode("", e.Id)
	return json.ObjectNode("", fields)
}

func (g *GetUserAddressRequest) ToJSON() *json.Node {
	fields := map[string]*json.Node{}
	return json.ObjectNode("", fields)
}

func (g *GetUserAddressResponse) ToJSON() *json.Node {
	fields := map[string]*json.Node{}
	fields["address"] = json.StringNode("", g.Address)
	return json.ObjectNode("", fields)
}

func (c *CreateEventRequest) ToJSON() *json.Node {
	fields := map[string]*json.Node{}
	fields["title"] = json.StringNode("", c.Title)
	fields["description"] = json.StringNode("", c.Description)
	fields["imageUri"] = json.StringNode("", c.ImageUri)
	fields["startDate"] = json.StringNode("", strconv.FormatUint(c.StartDate, 64))
	fields["endDate"] = json.StringNode("", strconv.FormatUint(c.EndDate, 64))
	fields["ticketPrice"] = json.NumberNode("", float64(c.TicketPrice))
	fields["capacity"] = json.NumberNode("", float64(c.Capacity))
	if c.Location != nil {
		fields["location"] = c.Location.ToJSON()
	}
	return json.ObjectNode("", fields)
}

func (c *CreateEventResponse) ToJSON() *json.Node {
	fields := map[string]*json.Node{}
	fields["id"] = json.StringNode("", c.Id)
	return json.ObjectNode("", fields)
}

func (e *EditEventRequest) ToJSON() *json.Node {
	fields := map[string]*json.Node{}
	fields["eventId"] = json.StringNode("", e.EventId)
	fields["title"] = json.StringNode("", e.Title)
	fields["description"] = json.StringNode("", e.Description)
	fields["imageUri"] = json.StringNode("", e.ImageUri)
	fields["startDate"] = json.StringNode("", strconv.FormatUint(e.StartDate, 64))
	fields["endDate"] = json.StringNode("", strconv.FormatUint(e.EndDate, 64))
	fields["ticketPrice"] = json.NumberNode("", float64(e.TicketPrice))
	fields["capacity"] = json.NumberNode("", float64(e.Capacity))
	if e.Location != nil {
		fields["location"] = e.Location.ToJSON()
	}
	return json.ObjectNode("", fields)
}

func (e *EditEventResponse) ToJSON() *json.Node {
	fields := map[string]*json.Node{}
	fields["id"] = json.StringNode("", e.Id)
	return json.ObjectNode("", fields)
}

func (p *ParticipateRequest) ToJSON() *json.Node {
	fields := map[string]*json.Node{}
	fields["eventId"] = json.StringNode("", p.EventId)
	fields["email"] = json.StringNode("", p.Email)
	return json.ObjectNode("", fields)
}

func (p *ParticipateResponse) ToJSON() *json.Node {
	fields := map[string]*json.Node{}
	fields["ticketSecret"] = json.StringNode("", p.TicketSecret)
	return json.ObjectNode("", fields)
}

func (e *EventLocation) ToJSON() *json.Node {
	fields := map[string]*json.Node{}
	fields["venueName"] = json.StringNode("", e.VenueName)
	fields["instructions"] = json.StringNode("", e.Instructions)
	address := map[string]*json.Node{}
	switch val := e.Address.(type) {
	case *AddressGeo:
		address["case"] = json.StringNode("", "geo")
		address["value"] = val.ToJSON()
	case *AddressVirtual:
		address["case"] = json.StringNode("", "virtual")
		address["value"] = val.ToJSON()
	case *AddressCustom:
		address["case"] = json.StringNode("", "custom")
		address["value"] = val.ToJSON()
	default:
		panic(errors.New("unknown address variant"))
	}
	fields["address"] = json.ObjectNode("", address)
	return json.ObjectNode("", fields)
}

func (a *AddressVirtual) ToJSON() *json.Node {
	fields := map[string]*json.Node{}
	fields["uri"] = json.StringNode("", a.Uri)
	return json.ObjectNode("", fields)
}

func (a *AddressGeo) ToJSON() *json.Node {
	fields := map[string]*json.Node{}
	fields["address"] = json.StringNode("", a.Address)
	fields["lat"] = json.NumberNode("", float64(a.Lat))
	fields["lng"] = json.NumberNode("", float64(a.Lng))
	fields["size"] = json.NumberNode("", float64(a.Size))
	return json.ObjectNode("", fields)
}

func (a *AddressCustom) ToJSON() *json.Node {
	fields := map[string]*json.Node{}
	fields["address"] = json.StringNode("", a.Address)
	fields["timezone"] = json.StringNode("", a.Timezone)
	return json.ObjectNode("", fields)
}
