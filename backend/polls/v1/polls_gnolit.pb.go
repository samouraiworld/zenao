// Code generated by protoc-gen-go-gnolit. DO NOT EDIT.

package pollsv1

import (
	fmt "fmt"
	strings "strings"
)

func (p *PollResult) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("PollResult{\n")
	if p.Option != "" {
		fmt.Fprintf(buf, "%s\tOption: %q,\n", linePrefix, p.Option)
	}
	if p.Count != 0 {
		fmt.Fprintf(buf, "%s\tCount: %d,\n", linePrefix, p.Count)
	}
	if p.HasUserVoted != false {
		fmt.Fprintf(buf, "%s\tHasUserVoted: %t,\n", linePrefix, p.HasUserVoted)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (p *Poll) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("Poll{\n")
	if p.Question != "" {
		fmt.Fprintf(buf, "%s\tQuestion: %q,\n", linePrefix, p.Question)
	}
	if len(p.Results) != 0 {
		fmt.Fprintf(buf, "%s\tResults: {\n", linePrefix)
		linePrefix += "\t"
		for _, elem := range p.Results {
			fmt.Fprintf(buf, "%s\t&%s%s,\n", linePrefix, typePrefix, elem.GnoLiteral(typePrefix, linePrefix+"\t"))
		}
		linePrefix = linePrefix[:len(linePrefix)-1]
		fmt.Fprintf(buf, "%s\t},\n", linePrefix)
	}
	if p.Kind != PollKind(0) {
		fmt.Fprintf(buf, "%s\tKind: %d,\n", linePrefix, p.Kind)
	}
	if p.Duration != 0 {
		fmt.Fprintf(buf, "%s\tDuration: %d,\n", linePrefix, p.Duration)
	}
	if p.CreatedAt != 0 {
		fmt.Fprintf(buf, "%s\tCreatedAt: %d,\n", linePrefix, p.CreatedAt)
	}
	if p.CreatedBy != "" {
		fmt.Fprintf(buf, "%s\tCreatedBy: %q,\n", linePrefix, p.CreatedBy)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}
