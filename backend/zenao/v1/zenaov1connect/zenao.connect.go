// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: zenao/v1/zenao.proto

package zenaov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/samouraiworld/zenao/backend/zenao/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ZenaoServiceName is the fully-qualified name of the ZenaoService service.
	ZenaoServiceName = "zenao.v1.ZenaoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ZenaoServiceEditUserProcedure is the fully-qualified name of the ZenaoService's EditUser RPC.
	ZenaoServiceEditUserProcedure = "/zenao.v1.ZenaoService/EditUser"
	// ZenaoServiceGetUserAddressProcedure is the fully-qualified name of the ZenaoService's
	// GetUserAddress RPC.
	ZenaoServiceGetUserAddressProcedure = "/zenao.v1.ZenaoService/GetUserAddress"
	// ZenaoServiceCreateEventProcedure is the fully-qualified name of the ZenaoService's CreateEvent
	// RPC.
	ZenaoServiceCreateEventProcedure = "/zenao.v1.ZenaoService/CreateEvent"
	// ZenaoServiceEditEventProcedure is the fully-qualified name of the ZenaoService's EditEvent RPC.
	ZenaoServiceEditEventProcedure = "/zenao.v1.ZenaoService/EditEvent"
	// ZenaoServiceParticipateProcedure is the fully-qualified name of the ZenaoService's Participate
	// RPC.
	ZenaoServiceParticipateProcedure = "/zenao.v1.ZenaoService/Participate"
	// ZenaoServiceCreatePollProcedure is the fully-qualified name of the ZenaoService's CreatePoll RPC.
	ZenaoServiceCreatePollProcedure = "/zenao.v1.ZenaoService/CreatePoll"
	// ZenaoServiceVotePollProcedure is the fully-qualified name of the ZenaoService's VotePoll RPC.
	ZenaoServiceVotePollProcedure = "/zenao.v1.ZenaoService/VotePoll"
	// ZenaoServiceCreatePostProcedure is the fully-qualified name of the ZenaoService's CreatePost RPC.
	ZenaoServiceCreatePostProcedure = "/zenao.v1.ZenaoService/CreatePost"
	// ZenaoServiceReactPostProcedure is the fully-qualified name of the ZenaoService's ReactPost RPC.
	ZenaoServiceReactPostProcedure = "/zenao.v1.ZenaoService/ReactPost"
)

// ZenaoServiceClient is a client for the zenao.v1.ZenaoService service.
type ZenaoServiceClient interface {
	// USER
	EditUser(context.Context, *connect.Request[v1.EditUserRequest]) (*connect.Response[v1.EditUserResponse], error)
	GetUserAddress(context.Context, *connect.Request[v1.GetUserAddressRequest]) (*connect.Response[v1.GetUserAddressResponse], error)
	// EVENT
	CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error)
	EditEvent(context.Context, *connect.Request[v1.EditEventRequest]) (*connect.Response[v1.EditEventResponse], error)
	Participate(context.Context, *connect.Request[v1.ParticipateRequest]) (*connect.Response[v1.ParticipateResponse], error)
	// FEED
	CreatePoll(context.Context, *connect.Request[v1.CreatePollRequest]) (*connect.Response[v1.CreatePollResponse], error)
	VotePoll(context.Context, *connect.Request[v1.VotePollRequest]) (*connect.Response[v1.VotePollResponse], error)
	CreatePost(context.Context, *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error)
	ReactPost(context.Context, *connect.Request[v1.ReactPostRequest]) (*connect.Response[v1.ReactPostResponse], error)
}

// NewZenaoServiceClient constructs a client for the zenao.v1.ZenaoService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewZenaoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ZenaoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	zenaoServiceMethods := v1.File_zenao_v1_zenao_proto.Services().ByName("ZenaoService").Methods()
	return &zenaoServiceClient{
		editUser: connect.NewClient[v1.EditUserRequest, v1.EditUserResponse](
			httpClient,
			baseURL+ZenaoServiceEditUserProcedure,
			connect.WithSchema(zenaoServiceMethods.ByName("EditUser")),
			connect.WithClientOptions(opts...),
		),
		getUserAddress: connect.NewClient[v1.GetUserAddressRequest, v1.GetUserAddressResponse](
			httpClient,
			baseURL+ZenaoServiceGetUserAddressProcedure,
			connect.WithSchema(zenaoServiceMethods.ByName("GetUserAddress")),
			connect.WithClientOptions(opts...),
		),
		createEvent: connect.NewClient[v1.CreateEventRequest, v1.CreateEventResponse](
			httpClient,
			baseURL+ZenaoServiceCreateEventProcedure,
			connect.WithSchema(zenaoServiceMethods.ByName("CreateEvent")),
			connect.WithClientOptions(opts...),
		),
		editEvent: connect.NewClient[v1.EditEventRequest, v1.EditEventResponse](
			httpClient,
			baseURL+ZenaoServiceEditEventProcedure,
			connect.WithSchema(zenaoServiceMethods.ByName("EditEvent")),
			connect.WithClientOptions(opts...),
		),
		participate: connect.NewClient[v1.ParticipateRequest, v1.ParticipateResponse](
			httpClient,
			baseURL+ZenaoServiceParticipateProcedure,
			connect.WithSchema(zenaoServiceMethods.ByName("Participate")),
			connect.WithClientOptions(opts...),
		),
		createPoll: connect.NewClient[v1.CreatePollRequest, v1.CreatePollResponse](
			httpClient,
			baseURL+ZenaoServiceCreatePollProcedure,
			connect.WithSchema(zenaoServiceMethods.ByName("CreatePoll")),
			connect.WithClientOptions(opts...),
		),
		votePoll: connect.NewClient[v1.VotePollRequest, v1.VotePollResponse](
			httpClient,
			baseURL+ZenaoServiceVotePollProcedure,
			connect.WithSchema(zenaoServiceMethods.ByName("VotePoll")),
			connect.WithClientOptions(opts...),
		),
		createPost: connect.NewClient[v1.CreatePostRequest, v1.CreatePostResponse](
			httpClient,
			baseURL+ZenaoServiceCreatePostProcedure,
			connect.WithSchema(zenaoServiceMethods.ByName("CreatePost")),
			connect.WithClientOptions(opts...),
		),
		reactPost: connect.NewClient[v1.ReactPostRequest, v1.ReactPostResponse](
			httpClient,
			baseURL+ZenaoServiceReactPostProcedure,
			connect.WithSchema(zenaoServiceMethods.ByName("ReactPost")),
			connect.WithClientOptions(opts...),
		),
	}
}

// zenaoServiceClient implements ZenaoServiceClient.
type zenaoServiceClient struct {
	editUser       *connect.Client[v1.EditUserRequest, v1.EditUserResponse]
	getUserAddress *connect.Client[v1.GetUserAddressRequest, v1.GetUserAddressResponse]
	createEvent    *connect.Client[v1.CreateEventRequest, v1.CreateEventResponse]
	editEvent      *connect.Client[v1.EditEventRequest, v1.EditEventResponse]
	participate    *connect.Client[v1.ParticipateRequest, v1.ParticipateResponse]
	createPoll     *connect.Client[v1.CreatePollRequest, v1.CreatePollResponse]
	votePoll       *connect.Client[v1.VotePollRequest, v1.VotePollResponse]
	createPost     *connect.Client[v1.CreatePostRequest, v1.CreatePostResponse]
	reactPost      *connect.Client[v1.ReactPostRequest, v1.ReactPostResponse]
}

// EditUser calls zenao.v1.ZenaoService.EditUser.
func (c *zenaoServiceClient) EditUser(ctx context.Context, req *connect.Request[v1.EditUserRequest]) (*connect.Response[v1.EditUserResponse], error) {
	return c.editUser.CallUnary(ctx, req)
}

// GetUserAddress calls zenao.v1.ZenaoService.GetUserAddress.
func (c *zenaoServiceClient) GetUserAddress(ctx context.Context, req *connect.Request[v1.GetUserAddressRequest]) (*connect.Response[v1.GetUserAddressResponse], error) {
	return c.getUserAddress.CallUnary(ctx, req)
}

// CreateEvent calls zenao.v1.ZenaoService.CreateEvent.
func (c *zenaoServiceClient) CreateEvent(ctx context.Context, req *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error) {
	return c.createEvent.CallUnary(ctx, req)
}

// EditEvent calls zenao.v1.ZenaoService.EditEvent.
func (c *zenaoServiceClient) EditEvent(ctx context.Context, req *connect.Request[v1.EditEventRequest]) (*connect.Response[v1.EditEventResponse], error) {
	return c.editEvent.CallUnary(ctx, req)
}

// Participate calls zenao.v1.ZenaoService.Participate.
func (c *zenaoServiceClient) Participate(ctx context.Context, req *connect.Request[v1.ParticipateRequest]) (*connect.Response[v1.ParticipateResponse], error) {
	return c.participate.CallUnary(ctx, req)
}

// CreatePoll calls zenao.v1.ZenaoService.CreatePoll.
func (c *zenaoServiceClient) CreatePoll(ctx context.Context, req *connect.Request[v1.CreatePollRequest]) (*connect.Response[v1.CreatePollResponse], error) {
	return c.createPoll.CallUnary(ctx, req)
}

// VotePoll calls zenao.v1.ZenaoService.VotePoll.
func (c *zenaoServiceClient) VotePoll(ctx context.Context, req *connect.Request[v1.VotePollRequest]) (*connect.Response[v1.VotePollResponse], error) {
	return c.votePoll.CallUnary(ctx, req)
}

// CreatePost calls zenao.v1.ZenaoService.CreatePost.
func (c *zenaoServiceClient) CreatePost(ctx context.Context, req *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error) {
	return c.createPost.CallUnary(ctx, req)
}

// ReactPost calls zenao.v1.ZenaoService.ReactPost.
func (c *zenaoServiceClient) ReactPost(ctx context.Context, req *connect.Request[v1.ReactPostRequest]) (*connect.Response[v1.ReactPostResponse], error) {
	return c.reactPost.CallUnary(ctx, req)
}

// ZenaoServiceHandler is an implementation of the zenao.v1.ZenaoService service.
type ZenaoServiceHandler interface {
	// USER
	EditUser(context.Context, *connect.Request[v1.EditUserRequest]) (*connect.Response[v1.EditUserResponse], error)
	GetUserAddress(context.Context, *connect.Request[v1.GetUserAddressRequest]) (*connect.Response[v1.GetUserAddressResponse], error)
	// EVENT
	CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error)
	EditEvent(context.Context, *connect.Request[v1.EditEventRequest]) (*connect.Response[v1.EditEventResponse], error)
	Participate(context.Context, *connect.Request[v1.ParticipateRequest]) (*connect.Response[v1.ParticipateResponse], error)
	// FEED
	CreatePoll(context.Context, *connect.Request[v1.CreatePollRequest]) (*connect.Response[v1.CreatePollResponse], error)
	VotePoll(context.Context, *connect.Request[v1.VotePollRequest]) (*connect.Response[v1.VotePollResponse], error)
	CreatePost(context.Context, *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error)
	ReactPost(context.Context, *connect.Request[v1.ReactPostRequest]) (*connect.Response[v1.ReactPostResponse], error)
}

// NewZenaoServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewZenaoServiceHandler(svc ZenaoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	zenaoServiceMethods := v1.File_zenao_v1_zenao_proto.Services().ByName("ZenaoService").Methods()
	zenaoServiceEditUserHandler := connect.NewUnaryHandler(
		ZenaoServiceEditUserProcedure,
		svc.EditUser,
		connect.WithSchema(zenaoServiceMethods.ByName("EditUser")),
		connect.WithHandlerOptions(opts...),
	)
	zenaoServiceGetUserAddressHandler := connect.NewUnaryHandler(
		ZenaoServiceGetUserAddressProcedure,
		svc.GetUserAddress,
		connect.WithSchema(zenaoServiceMethods.ByName("GetUserAddress")),
		connect.WithHandlerOptions(opts...),
	)
	zenaoServiceCreateEventHandler := connect.NewUnaryHandler(
		ZenaoServiceCreateEventProcedure,
		svc.CreateEvent,
		connect.WithSchema(zenaoServiceMethods.ByName("CreateEvent")),
		connect.WithHandlerOptions(opts...),
	)
	zenaoServiceEditEventHandler := connect.NewUnaryHandler(
		ZenaoServiceEditEventProcedure,
		svc.EditEvent,
		connect.WithSchema(zenaoServiceMethods.ByName("EditEvent")),
		connect.WithHandlerOptions(opts...),
	)
	zenaoServiceParticipateHandler := connect.NewUnaryHandler(
		ZenaoServiceParticipateProcedure,
		svc.Participate,
		connect.WithSchema(zenaoServiceMethods.ByName("Participate")),
		connect.WithHandlerOptions(opts...),
	)
	zenaoServiceCreatePollHandler := connect.NewUnaryHandler(
		ZenaoServiceCreatePollProcedure,
		svc.CreatePoll,
		connect.WithSchema(zenaoServiceMethods.ByName("CreatePoll")),
		connect.WithHandlerOptions(opts...),
	)
	zenaoServiceVotePollHandler := connect.NewUnaryHandler(
		ZenaoServiceVotePollProcedure,
		svc.VotePoll,
		connect.WithSchema(zenaoServiceMethods.ByName("VotePoll")),
		connect.WithHandlerOptions(opts...),
	)
	zenaoServiceCreatePostHandler := connect.NewUnaryHandler(
		ZenaoServiceCreatePostProcedure,
		svc.CreatePost,
		connect.WithSchema(zenaoServiceMethods.ByName("CreatePost")),
		connect.WithHandlerOptions(opts...),
	)
	zenaoServiceReactPostHandler := connect.NewUnaryHandler(
		ZenaoServiceReactPostProcedure,
		svc.ReactPost,
		connect.WithSchema(zenaoServiceMethods.ByName("ReactPost")),
		connect.WithHandlerOptions(opts...),
	)
	return "/zenao.v1.ZenaoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ZenaoServiceEditUserProcedure:
			zenaoServiceEditUserHandler.ServeHTTP(w, r)
		case ZenaoServiceGetUserAddressProcedure:
			zenaoServiceGetUserAddressHandler.ServeHTTP(w, r)
		case ZenaoServiceCreateEventProcedure:
			zenaoServiceCreateEventHandler.ServeHTTP(w, r)
		case ZenaoServiceEditEventProcedure:
			zenaoServiceEditEventHandler.ServeHTTP(w, r)
		case ZenaoServiceParticipateProcedure:
			zenaoServiceParticipateHandler.ServeHTTP(w, r)
		case ZenaoServiceCreatePollProcedure:
			zenaoServiceCreatePollHandler.ServeHTTP(w, r)
		case ZenaoServiceVotePollProcedure:
			zenaoServiceVotePollHandler.ServeHTTP(w, r)
		case ZenaoServiceCreatePostProcedure:
			zenaoServiceCreatePostHandler.ServeHTTP(w, r)
		case ZenaoServiceReactPostProcedure:
			zenaoServiceReactPostHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedZenaoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedZenaoServiceHandler struct{}

func (UnimplementedZenaoServiceHandler) EditUser(context.Context, *connect.Request[v1.EditUserRequest]) (*connect.Response[v1.EditUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zenao.v1.ZenaoService.EditUser is not implemented"))
}

func (UnimplementedZenaoServiceHandler) GetUserAddress(context.Context, *connect.Request[v1.GetUserAddressRequest]) (*connect.Response[v1.GetUserAddressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zenao.v1.ZenaoService.GetUserAddress is not implemented"))
}

func (UnimplementedZenaoServiceHandler) CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zenao.v1.ZenaoService.CreateEvent is not implemented"))
}

func (UnimplementedZenaoServiceHandler) EditEvent(context.Context, *connect.Request[v1.EditEventRequest]) (*connect.Response[v1.EditEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zenao.v1.ZenaoService.EditEvent is not implemented"))
}

func (UnimplementedZenaoServiceHandler) Participate(context.Context, *connect.Request[v1.ParticipateRequest]) (*connect.Response[v1.ParticipateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zenao.v1.ZenaoService.Participate is not implemented"))
}

func (UnimplementedZenaoServiceHandler) CreatePoll(context.Context, *connect.Request[v1.CreatePollRequest]) (*connect.Response[v1.CreatePollResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zenao.v1.ZenaoService.CreatePoll is not implemented"))
}

func (UnimplementedZenaoServiceHandler) VotePoll(context.Context, *connect.Request[v1.VotePollRequest]) (*connect.Response[v1.VotePollResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zenao.v1.ZenaoService.VotePoll is not implemented"))
}

func (UnimplementedZenaoServiceHandler) CreatePost(context.Context, *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zenao.v1.ZenaoService.CreatePost is not implemented"))
}

func (UnimplementedZenaoServiceHandler) ReactPost(context.Context, *connect.Request[v1.ReactPostRequest]) (*connect.Response[v1.ReactPostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zenao.v1.ZenaoService.ReactPost is not implemented"))
}
