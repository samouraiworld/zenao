// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: zenao/v1/zenao.proto

package zenaov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/samouraiworld/zenao/backend/zenao/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ZenaoServiceName is the fully-qualified name of the ZenaoService service.
	ZenaoServiceName = "zenao.v1.ZenaoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ZenaoServiceCreateEventProcedure is the fully-qualified name of the ZenaoService's CreateEvent
	// RPC.
	ZenaoServiceCreateEventProcedure = "/zenao.v1.ZenaoService/CreateEvent"
	// ZenaoServiceCreateBusinessAccountProcedure is the fully-qualified name of the ZenaoService's
	// CreateBusinessAccount RPC.
	ZenaoServiceCreateBusinessAccountProcedure = "/zenao.v1.ZenaoService/CreateBusinessAccount"
	// ZenaoServiceListBusinessAccountsProcedure is the fully-qualified name of the ZenaoService's
	// ListBusinessAccounts RPC.
	ZenaoServiceListBusinessAccountsProcedure = "/zenao.v1.ZenaoService/ListBusinessAccounts"
	// ZenaoServiceCreateCheckoutSessionProcedure is the fully-qualified name of the ZenaoService's
	// CreateCheckoutSession RPC.
	ZenaoServiceCreateCheckoutSessionProcedure = "/zenao.v1.ZenaoService/CreateCheckoutSession"
	// ZenaoServiceGetBusinessAccountLinkProcedure is the fully-qualified name of the ZenaoService's
	// GetBusinessAccountLink RPC.
	ZenaoServiceGetBusinessAccountLinkProcedure = "/zenao.v1.ZenaoService/GetBusinessAccountLink"
)

// ZenaoServiceClient is a client for the zenao.v1.ZenaoService service.
type ZenaoServiceClient interface {
	CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error)
	CreateBusinessAccount(context.Context, *connect.Request[v1.CreateBusinessAccountRequest]) (*connect.Response[v1.CreateBusinessAccountResponse], error)
	ListBusinessAccounts(context.Context, *connect.Request[v1.ListBusinessAccountsRequest]) (*connect.Response[v1.ListBusinessAccountsResponse], error)
	CreateCheckoutSession(context.Context, *connect.Request[v1.CreateCheckoutSessionRequest]) (*connect.Response[v1.CreateCheckoutSessionResponse], error)
	GetBusinessAccountLink(context.Context, *connect.Request[v1.GetBusinessAccountLinkRequest]) (*connect.Response[v1.GetBusinessAccountLinkResponse], error)
}

// NewZenaoServiceClient constructs a client for the zenao.v1.ZenaoService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewZenaoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ZenaoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	zenaoServiceMethods := v1.File_zenao_v1_zenao_proto.Services().ByName("ZenaoService").Methods()
	return &zenaoServiceClient{
		createEvent: connect.NewClient[v1.CreateEventRequest, v1.CreateEventResponse](
			httpClient,
			baseURL+ZenaoServiceCreateEventProcedure,
			connect.WithSchema(zenaoServiceMethods.ByName("CreateEvent")),
			connect.WithClientOptions(opts...),
		),
		createBusinessAccount: connect.NewClient[v1.CreateBusinessAccountRequest, v1.CreateBusinessAccountResponse](
			httpClient,
			baseURL+ZenaoServiceCreateBusinessAccountProcedure,
			connect.WithSchema(zenaoServiceMethods.ByName("CreateBusinessAccount")),
			connect.WithClientOptions(opts...),
		),
		listBusinessAccounts: connect.NewClient[v1.ListBusinessAccountsRequest, v1.ListBusinessAccountsResponse](
			httpClient,
			baseURL+ZenaoServiceListBusinessAccountsProcedure,
			connect.WithSchema(zenaoServiceMethods.ByName("ListBusinessAccounts")),
			connect.WithClientOptions(opts...),
		),
		createCheckoutSession: connect.NewClient[v1.CreateCheckoutSessionRequest, v1.CreateCheckoutSessionResponse](
			httpClient,
			baseURL+ZenaoServiceCreateCheckoutSessionProcedure,
			connect.WithSchema(zenaoServiceMethods.ByName("CreateCheckoutSession")),
			connect.WithClientOptions(opts...),
		),
		getBusinessAccountLink: connect.NewClient[v1.GetBusinessAccountLinkRequest, v1.GetBusinessAccountLinkResponse](
			httpClient,
			baseURL+ZenaoServiceGetBusinessAccountLinkProcedure,
			connect.WithSchema(zenaoServiceMethods.ByName("GetBusinessAccountLink")),
			connect.WithClientOptions(opts...),
		),
	}
}

// zenaoServiceClient implements ZenaoServiceClient.
type zenaoServiceClient struct {
	createEvent            *connect.Client[v1.CreateEventRequest, v1.CreateEventResponse]
	createBusinessAccount  *connect.Client[v1.CreateBusinessAccountRequest, v1.CreateBusinessAccountResponse]
	listBusinessAccounts   *connect.Client[v1.ListBusinessAccountsRequest, v1.ListBusinessAccountsResponse]
	createCheckoutSession  *connect.Client[v1.CreateCheckoutSessionRequest, v1.CreateCheckoutSessionResponse]
	getBusinessAccountLink *connect.Client[v1.GetBusinessAccountLinkRequest, v1.GetBusinessAccountLinkResponse]
}

// CreateEvent calls zenao.v1.ZenaoService.CreateEvent.
func (c *zenaoServiceClient) CreateEvent(ctx context.Context, req *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error) {
	return c.createEvent.CallUnary(ctx, req)
}

// CreateBusinessAccount calls zenao.v1.ZenaoService.CreateBusinessAccount.
func (c *zenaoServiceClient) CreateBusinessAccount(ctx context.Context, req *connect.Request[v1.CreateBusinessAccountRequest]) (*connect.Response[v1.CreateBusinessAccountResponse], error) {
	return c.createBusinessAccount.CallUnary(ctx, req)
}

// ListBusinessAccounts calls zenao.v1.ZenaoService.ListBusinessAccounts.
func (c *zenaoServiceClient) ListBusinessAccounts(ctx context.Context, req *connect.Request[v1.ListBusinessAccountsRequest]) (*connect.Response[v1.ListBusinessAccountsResponse], error) {
	return c.listBusinessAccounts.CallUnary(ctx, req)
}

// CreateCheckoutSession calls zenao.v1.ZenaoService.CreateCheckoutSession.
func (c *zenaoServiceClient) CreateCheckoutSession(ctx context.Context, req *connect.Request[v1.CreateCheckoutSessionRequest]) (*connect.Response[v1.CreateCheckoutSessionResponse], error) {
	return c.createCheckoutSession.CallUnary(ctx, req)
}

// GetBusinessAccountLink calls zenao.v1.ZenaoService.GetBusinessAccountLink.
func (c *zenaoServiceClient) GetBusinessAccountLink(ctx context.Context, req *connect.Request[v1.GetBusinessAccountLinkRequest]) (*connect.Response[v1.GetBusinessAccountLinkResponse], error) {
	return c.getBusinessAccountLink.CallUnary(ctx, req)
}

// ZenaoServiceHandler is an implementation of the zenao.v1.ZenaoService service.
type ZenaoServiceHandler interface {
	CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error)
	CreateBusinessAccount(context.Context, *connect.Request[v1.CreateBusinessAccountRequest]) (*connect.Response[v1.CreateBusinessAccountResponse], error)
	ListBusinessAccounts(context.Context, *connect.Request[v1.ListBusinessAccountsRequest]) (*connect.Response[v1.ListBusinessAccountsResponse], error)
	CreateCheckoutSession(context.Context, *connect.Request[v1.CreateCheckoutSessionRequest]) (*connect.Response[v1.CreateCheckoutSessionResponse], error)
	GetBusinessAccountLink(context.Context, *connect.Request[v1.GetBusinessAccountLinkRequest]) (*connect.Response[v1.GetBusinessAccountLinkResponse], error)
}

// NewZenaoServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewZenaoServiceHandler(svc ZenaoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	zenaoServiceMethods := v1.File_zenao_v1_zenao_proto.Services().ByName("ZenaoService").Methods()
	zenaoServiceCreateEventHandler := connect.NewUnaryHandler(
		ZenaoServiceCreateEventProcedure,
		svc.CreateEvent,
		connect.WithSchema(zenaoServiceMethods.ByName("CreateEvent")),
		connect.WithHandlerOptions(opts...),
	)
	zenaoServiceCreateBusinessAccountHandler := connect.NewUnaryHandler(
		ZenaoServiceCreateBusinessAccountProcedure,
		svc.CreateBusinessAccount,
		connect.WithSchema(zenaoServiceMethods.ByName("CreateBusinessAccount")),
		connect.WithHandlerOptions(opts...),
	)
	zenaoServiceListBusinessAccountsHandler := connect.NewUnaryHandler(
		ZenaoServiceListBusinessAccountsProcedure,
		svc.ListBusinessAccounts,
		connect.WithSchema(zenaoServiceMethods.ByName("ListBusinessAccounts")),
		connect.WithHandlerOptions(opts...),
	)
	zenaoServiceCreateCheckoutSessionHandler := connect.NewUnaryHandler(
		ZenaoServiceCreateCheckoutSessionProcedure,
		svc.CreateCheckoutSession,
		connect.WithSchema(zenaoServiceMethods.ByName("CreateCheckoutSession")),
		connect.WithHandlerOptions(opts...),
	)
	zenaoServiceGetBusinessAccountLinkHandler := connect.NewUnaryHandler(
		ZenaoServiceGetBusinessAccountLinkProcedure,
		svc.GetBusinessAccountLink,
		connect.WithSchema(zenaoServiceMethods.ByName("GetBusinessAccountLink")),
		connect.WithHandlerOptions(opts...),
	)
	return "/zenao.v1.ZenaoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ZenaoServiceCreateEventProcedure:
			zenaoServiceCreateEventHandler.ServeHTTP(w, r)
		case ZenaoServiceCreateBusinessAccountProcedure:
			zenaoServiceCreateBusinessAccountHandler.ServeHTTP(w, r)
		case ZenaoServiceListBusinessAccountsProcedure:
			zenaoServiceListBusinessAccountsHandler.ServeHTTP(w, r)
		case ZenaoServiceCreateCheckoutSessionProcedure:
			zenaoServiceCreateCheckoutSessionHandler.ServeHTTP(w, r)
		case ZenaoServiceGetBusinessAccountLinkProcedure:
			zenaoServiceGetBusinessAccountLinkHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedZenaoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedZenaoServiceHandler struct{}

func (UnimplementedZenaoServiceHandler) CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zenao.v1.ZenaoService.CreateEvent is not implemented"))
}

func (UnimplementedZenaoServiceHandler) CreateBusinessAccount(context.Context, *connect.Request[v1.CreateBusinessAccountRequest]) (*connect.Response[v1.CreateBusinessAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zenao.v1.ZenaoService.CreateBusinessAccount is not implemented"))
}

func (UnimplementedZenaoServiceHandler) ListBusinessAccounts(context.Context, *connect.Request[v1.ListBusinessAccountsRequest]) (*connect.Response[v1.ListBusinessAccountsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zenao.v1.ZenaoService.ListBusinessAccounts is not implemented"))
}

func (UnimplementedZenaoServiceHandler) CreateCheckoutSession(context.Context, *connect.Request[v1.CreateCheckoutSessionRequest]) (*connect.Response[v1.CreateCheckoutSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zenao.v1.ZenaoService.CreateCheckoutSession is not implemented"))
}

func (UnimplementedZenaoServiceHandler) GetBusinessAccountLink(context.Context, *connect.Request[v1.GetBusinessAccountLinkRequest]) (*connect.Response[v1.GetBusinessAccountLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zenao.v1.ZenaoService.GetBusinessAccountLink is not implemented"))
}
