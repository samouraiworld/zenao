// Code generated by protoc-gen-go-gnolit. DO NOT EDIT.

package zenaov1

import (
	errors "errors"
	fmt "fmt"
	v1 "github.com/samouraiworld/zenao/backend/polls/v1"
	strings "strings"
)

func (e *EditUserRequest) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("EditUserRequest{\n")
	if e.DisplayName != "" {
		fmt.Fprintf(buf, "%s\tDisplayName: %q,\n", linePrefix, e.DisplayName)
	}
	if e.Bio != "" {
		fmt.Fprintf(buf, "%s\tBio: %q,\n", linePrefix, e.Bio)
	}
	if e.AvatarUri != "" {
		fmt.Fprintf(buf, "%s\tAvatarUri: %q,\n", linePrefix, e.AvatarUri)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (e *EditUserResponse) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("EditUserResponse{\n")
	if e.Id != "" {
		fmt.Fprintf(buf, "%s\tId: %q,\n", linePrefix, e.Id)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (g *GetUserAddressRequest) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("GetUserAddressRequest{\n")
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (g *GetUserAddressResponse) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("GetUserAddressResponse{\n")
	if g.Address != "" {
		fmt.Fprintf(buf, "%s\tAddress: %q,\n", linePrefix, g.Address)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (c *CreateEventRequest) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("CreateEventRequest{\n")
	if c.Title != "" {
		fmt.Fprintf(buf, "%s\tTitle: %q,\n", linePrefix, c.Title)
	}
	if c.Description != "" {
		fmt.Fprintf(buf, "%s\tDescription: %q,\n", linePrefix, c.Description)
	}
	if c.ImageUri != "" {
		fmt.Fprintf(buf, "%s\tImageUri: %q,\n", linePrefix, c.ImageUri)
	}
	if c.StartDate != 0 {
		fmt.Fprintf(buf, "%s\tStartDate: %d,\n", linePrefix, c.StartDate)
	}
	if c.EndDate != 0 {
		fmt.Fprintf(buf, "%s\tEndDate: %d,\n", linePrefix, c.EndDate)
	}
	if c.TicketPrice != 0 {
		fmt.Fprintf(buf, "%s\tTicketPrice: %g,\n", linePrefix, c.TicketPrice)
	}
	if c.Capacity != 0 {
		fmt.Fprintf(buf, "%s\tCapacity: %d,\n", linePrefix, c.Capacity)
	}
	if c.Location != nil {
		fmt.Fprintf(buf, "%s\tLocation: &%s%s,\n", linePrefix, typePrefix, c.Location.GnoLiteral(typePrefix, linePrefix+"\t"))
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (c *CreateEventResponse) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("CreateEventResponse{\n")
	if c.Id != "" {
		fmt.Fprintf(buf, "%s\tId: %q,\n", linePrefix, c.Id)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (e *EditEventRequest) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("EditEventRequest{\n")
	if e.EventId != "" {
		fmt.Fprintf(buf, "%s\tEventId: %q,\n", linePrefix, e.EventId)
	}
	if e.Title != "" {
		fmt.Fprintf(buf, "%s\tTitle: %q,\n", linePrefix, e.Title)
	}
	if e.Description != "" {
		fmt.Fprintf(buf, "%s\tDescription: %q,\n", linePrefix, e.Description)
	}
	if e.ImageUri != "" {
		fmt.Fprintf(buf, "%s\tImageUri: %q,\n", linePrefix, e.ImageUri)
	}
	if e.StartDate != 0 {
		fmt.Fprintf(buf, "%s\tStartDate: %d,\n", linePrefix, e.StartDate)
	}
	if e.EndDate != 0 {
		fmt.Fprintf(buf, "%s\tEndDate: %d,\n", linePrefix, e.EndDate)
	}
	if e.TicketPrice != 0 {
		fmt.Fprintf(buf, "%s\tTicketPrice: %g,\n", linePrefix, e.TicketPrice)
	}
	if e.Capacity != 0 {
		fmt.Fprintf(buf, "%s\tCapacity: %d,\n", linePrefix, e.Capacity)
	}
	if e.Location != nil {
		fmt.Fprintf(buf, "%s\tLocation: &%s%s,\n", linePrefix, typePrefix, e.Location.GnoLiteral(typePrefix, linePrefix+"\t"))
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (e *EditEventResponse) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("EditEventResponse{\n")
	if e.Id != "" {
		fmt.Fprintf(buf, "%s\tId: %q,\n", linePrefix, e.Id)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (p *ParticipateRequest) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("ParticipateRequest{\n")
	if p.EventId != "" {
		fmt.Fprintf(buf, "%s\tEventId: %q,\n", linePrefix, p.EventId)
	}
	if p.Email != "" {
		fmt.Fprintf(buf, "%s\tEmail: %q,\n", linePrefix, p.Email)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (p *ParticipateResponse) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("ParticipateResponse{\n")
	if p.TicketSecret != "" {
		fmt.Fprintf(buf, "%s\tTicketSecret: %q,\n", linePrefix, p.TicketSecret)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (b *BroadcastEventRequest) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("BroadcastEventRequest{\n")
	if b.EventId != "" {
		fmt.Fprintf(buf, "%s\tEventId: %q,\n", linePrefix, b.EventId)
	}
	if b.Message != "" {
		fmt.Fprintf(buf, "%s\tMessage: %q,\n", linePrefix, b.Message)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (b *BroadcastEventResponse) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("BroadcastEventResponse{\n")
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (e *EventLocation) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("EventLocation{\n")
	if e.VenueName != "" {
		fmt.Fprintf(buf, "%s\tVenueName: %q,\n", linePrefix, e.VenueName)
	}
	if e.Instructions != "" {
		fmt.Fprintf(buf, "%s\tInstructions: %q,\n", linePrefix, e.Instructions)
	}
	switch val := e.Address.(type) {
	case *EventLocation_Geo:
		fmt.Fprintf(buf, "%s\tAddress: &%s,\n", linePrefix, val.Geo.GnoLiteral(typePrefix, linePrefix+"\t"))
	case *EventLocation_Virtual:
		fmt.Fprintf(buf, "%s\tAddress: &%s,\n", linePrefix, val.Virtual.GnoLiteral(typePrefix, linePrefix+"\t"))
	case *EventLocation_Custom:
		fmt.Fprintf(buf, "%s\tAddress: &%s,\n", linePrefix, val.Custom.GnoLiteral(typePrefix, linePrefix+"\t"))
	default:
		panic(errors.New("unknown address variant"))
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (a *AddressVirtual) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("AddressVirtual{\n")
	if a.Uri != "" {
		fmt.Fprintf(buf, "%s\tUri: %q,\n", linePrefix, a.Uri)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (a *AddressGeo) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("AddressGeo{\n")
	if a.Address != "" {
		fmt.Fprintf(buf, "%s\tAddress: %q,\n", linePrefix, a.Address)
	}
	if a.Lat != 0 {
		fmt.Fprintf(buf, "%s\tLat: %g,\n", linePrefix, a.Lat)
	}
	if a.Lng != 0 {
		fmt.Fprintf(buf, "%s\tLng: %g,\n", linePrefix, a.Lng)
	}
	if a.Size != 0 {
		fmt.Fprintf(buf, "%s\tSize: %g,\n", linePrefix, a.Size)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (a *AddressCustom) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("AddressCustom{\n")
	if a.Address != "" {
		fmt.Fprintf(buf, "%s\tAddress: %q,\n", linePrefix, a.Address)
	}
	if a.Timezone != "" {
		fmt.Fprintf(buf, "%s\tTimezone: %q,\n", linePrefix, a.Timezone)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (e *EventInfo) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("EventInfo{\n")
	if e.Title != "" {
		fmt.Fprintf(buf, "%s\tTitle: %q,\n", linePrefix, e.Title)
	}
	if e.Description != "" {
		fmt.Fprintf(buf, "%s\tDescription: %q,\n", linePrefix, e.Description)
	}
	if e.ImageUri != "" {
		fmt.Fprintf(buf, "%s\tImageUri: %q,\n", linePrefix, e.ImageUri)
	}
	if e.Creator != "" {
		fmt.Fprintf(buf, "%s\tCreator: %q,\n", linePrefix, e.Creator)
	}
	if e.StartDate != 0 {
		fmt.Fprintf(buf, "%s\tStartDate: %d,\n", linePrefix, e.StartDate)
	}
	if e.EndDate != 0 {
		fmt.Fprintf(buf, "%s\tEndDate: %d,\n", linePrefix, e.EndDate)
	}
	if e.Capacity != 0 {
		fmt.Fprintf(buf, "%s\tCapacity: %d,\n", linePrefix, e.Capacity)
	}
	if e.Location != nil {
		fmt.Fprintf(buf, "%s\tLocation: &%s%s,\n", linePrefix, typePrefix, e.Location.GnoLiteral(typePrefix, linePrefix+"\t"))
	}
	if e.Participants != 0 {
		fmt.Fprintf(buf, "%s\tParticipants: %d,\n", linePrefix, e.Participants)
	}
	if e.PkgPath != "" {
		fmt.Fprintf(buf, "%s\tPkgPath: %q,\n", linePrefix, e.PkgPath)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (b *BatchProfileField) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("BatchProfileField{\n")
	if b.Type != "" {
		fmt.Fprintf(buf, "%s\tType: %q,\n", linePrefix, b.Type)
	}
	if b.Key != "" {
		fmt.Fprintf(buf, "%s\tKey: %q,\n", linePrefix, b.Key)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (b *BatchProfileRequest) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("BatchProfileRequest{\n")
	if len(b.Fields) != 0 {
		fmt.Fprintf(buf, "%s\tFields: []*BatchProfileField{\n", linePrefix)
		linePrefix += "\t"
		for _, elem := range b.Fields {
			fmt.Fprintf(buf, "%s\t&%s%s,\n", linePrefix, typePrefix, elem.GnoLiteral(typePrefix, linePrefix+"\t"))
		}
		linePrefix = linePrefix[:len(linePrefix)-1]
		fmt.Fprintf(buf, "%s\t},\n", linePrefix)
	}
	if len(b.Addresses) != 0 {
		fmt.Fprintf(buf, "%s\tAddresses: []string{\n", linePrefix)
		linePrefix += "\t"
		for _, elem := range b.Addresses {
			fmt.Fprintf(buf, "%s\t%q,\n", linePrefix, elem)
		}
		linePrefix = linePrefix[:len(linePrefix)-1]
		fmt.Fprintf(buf, "%s\t},\n", linePrefix)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (c *CreatePollRequest) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("CreatePollRequest{\n")
	if c.EventId != "" {
		fmt.Fprintf(buf, "%s\tEventId: %q,\n", linePrefix, c.EventId)
	}
	if c.Question != "" {
		fmt.Fprintf(buf, "%s\tQuestion: %q,\n", linePrefix, c.Question)
	}
	if len(c.Options) != 0 {
		fmt.Fprintf(buf, "%s\tOptions: []string{\n", linePrefix)
		linePrefix += "\t"
		for _, elem := range c.Options {
			fmt.Fprintf(buf, "%s\t%q,\n", linePrefix, elem)
		}
		linePrefix = linePrefix[:len(linePrefix)-1]
		fmt.Fprintf(buf, "%s\t},\n", linePrefix)
	}
	if c.Duration != 0 {
		fmt.Fprintf(buf, "%s\tDuration: %d,\n", linePrefix, c.Duration)
	}
	if c.Kind != v1.PollKind(0) {
		fmt.Fprintf(buf, "%s\tKind: %d,\n", linePrefix, c.Kind)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (c *CreatePollResponse) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("CreatePollResponse{\n")
	if c.PostId != "" {
		fmt.Fprintf(buf, "%s\tPostId: %q,\n", linePrefix, c.PostId)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (v *VotePollRequest) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("VotePollRequest{\n")
	if v.PollId != "" {
		fmt.Fprintf(buf, "%s\tPollId: %q,\n", linePrefix, v.PollId)
	}
	if v.Option != "" {
		fmt.Fprintf(buf, "%s\tOption: %q,\n", linePrefix, v.Option)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (v *VotePollResponse) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("VotePollResponse{\n")
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (c *CreatePostRequest) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("CreatePostRequest{\n")
	if c.EventId != "" {
		fmt.Fprintf(buf, "%s\tEventId: %q,\n", linePrefix, c.EventId)
	}
	if c.Content != "" {
		fmt.Fprintf(buf, "%s\tContent: %q,\n", linePrefix, c.Content)
	}
	if len(c.Tags) != 0 {
		fmt.Fprintf(buf, "%s\tTags: []string{\n", linePrefix)
		linePrefix += "\t"
		for _, elem := range c.Tags {
			fmt.Fprintf(buf, "%s\t%q,\n", linePrefix, elem)
		}
		linePrefix = linePrefix[:len(linePrefix)-1]
		fmt.Fprintf(buf, "%s\t},\n", linePrefix)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (c *CreatePostResponse) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("CreatePostResponse{\n")
	if c.PostId != "" {
		fmt.Fprintf(buf, "%s\tPostId: %q,\n", linePrefix, c.PostId)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (r *ReactPostRequest) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("ReactPostRequest{\n")
	if r.PostId != "" {
		fmt.Fprintf(buf, "%s\tPostId: %q,\n", linePrefix, r.PostId)
	}
	if r.Icon != "" {
		fmt.Fprintf(buf, "%s\tIcon: %q,\n", linePrefix, r.Icon)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (r *ReactPostResponse) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("ReactPostResponse{\n")
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (g *GetEventTicketsRequest) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("GetEventTicketsRequest{\n")
	if g.EventId != "" {
		fmt.Fprintf(buf, "%s\tEventId: %q,\n", linePrefix, g.EventId)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (g *GetEventTicketsResponse) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("GetEventTicketsResponse{\n")
	if len(g.TicketsSecrets) != 0 {
		fmt.Fprintf(buf, "%s\tTicketsSecrets: []string{\n", linePrefix)
		linePrefix += "\t"
		for _, elem := range g.TicketsSecrets {
			fmt.Fprintf(buf, "%s\t%q,\n", linePrefix, elem)
		}
		linePrefix = linePrefix[:len(linePrefix)-1]
		fmt.Fprintf(buf, "%s\t},\n", linePrefix)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}
