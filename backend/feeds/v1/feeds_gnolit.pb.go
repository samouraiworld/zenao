// Code generated by protoc-gen-go-gnolit. DO NOT EDIT.

package feedsv1

import (
	errors "errors"
	fmt "fmt"
	strings "strings"
)

func (p *PostGeoLoc) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("PostGeoLoc{\n")
	if p.Lat != 0 {
		fmt.Fprintf(buf, "%s\tLat: %g,\n", linePrefix, p.Lat)
	}
	if p.Lng != 0 {
		fmt.Fprintf(buf, "%s\tLng: %g,\n", linePrefix, p.Lng)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (s *StandardPost) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("StandardPost{\n")
	if s.Content != "" {
		fmt.Fprintf(buf, "%s\tContent: %q,\n", linePrefix, s.Content)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (a *ArticlePost) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("ArticlePost{\n")
	if a.Title != "" {
		fmt.Fprintf(buf, "%s\tTitle: %q,\n", linePrefix, a.Title)
	}
	if a.PreviewText != "" {
		fmt.Fprintf(buf, "%s\tPreviewText: %q,\n", linePrefix, a.PreviewText)
	}
	if a.PreviewImageUri != "" {
		fmt.Fprintf(buf, "%s\tPreviewImageUri: %q,\n", linePrefix, a.PreviewImageUri)
	}
	if a.Content != "" {
		fmt.Fprintf(buf, "%s\tContent: %q,\n", linePrefix, a.Content)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (l *LinkPost) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("LinkPost{\n")
	if l.Uri != "" {
		fmt.Fprintf(buf, "%s\tUri: %q,\n", linePrefix, l.Uri)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (i *ImagePost) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("ImagePost{\n")
	if i.Title != "" {
		fmt.Fprintf(buf, "%s\tTitle: %q,\n", linePrefix, i.Title)
	}
	if i.Description != "" {
		fmt.Fprintf(buf, "%s\tDescription: %q,\n", linePrefix, i.Description)
	}
	if i.ImageUri != "" {
		fmt.Fprintf(buf, "%s\tImageUri: %q,\n", linePrefix, i.ImageUri)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (a *AudioPost) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("AudioPost{\n")
	if a.Title != "" {
		fmt.Fprintf(buf, "%s\tTitle: %q,\n", linePrefix, a.Title)
	}
	if a.Description != "" {
		fmt.Fprintf(buf, "%s\tDescription: %q,\n", linePrefix, a.Description)
	}
	if a.AudioUri != "" {
		fmt.Fprintf(buf, "%s\tAudioUri: %q,\n", linePrefix, a.AudioUri)
	}
	if a.ImageUri != "" {
		fmt.Fprintf(buf, "%s\tImageUri: %q,\n", linePrefix, a.ImageUri)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (v *VideoPost) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("VideoPost{\n")
	if v.Description != "" {
		fmt.Fprintf(buf, "%s\tDescription: %q,\n", linePrefix, v.Description)
	}
	if v.VideoUri != "" {
		fmt.Fprintf(buf, "%s\tVideoUri: %q,\n", linePrefix, v.VideoUri)
	}
	if v.ThumbnailImageUri != "" {
		fmt.Fprintf(buf, "%s\tThumbnailImageUri: %q,\n", linePrefix, v.ThumbnailImageUri)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (r *Reaction) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("Reaction{\n")
	if r.PostUri != "" {
		fmt.Fprintf(buf, "%s\tPostUri: %q,\n", linePrefix, r.PostUri)
	}
	if r.Icon != "" {
		fmt.Fprintf(buf, "%s\tIcon: %q,\n", linePrefix, r.Icon)
	}
	if r.UserId != "" {
		fmt.Fprintf(buf, "%s\tUserId: %q,\n", linePrefix, r.UserId)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (t *Tip) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("Tip{\n")
	if t.PostLocalId != "" {
		fmt.Fprintf(buf, "%s\tPostLocalId: %q,\n", linePrefix, t.PostLocalId)
	}
	if t.Denom != "" {
		fmt.Fprintf(buf, "%s\tDenom: %q,\n", linePrefix, t.Denom)
	}
	if t.Amount != 0 {
		fmt.Fprintf(buf, "%s\tAmount: %d,\n", linePrefix, t.Amount)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (p *Post) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("Post{\n")
	if p.Author != "" {
		fmt.Fprintf(buf, "%s\tAuthor: %q,\n", linePrefix, p.Author)
	}
	if p.ParentUri != "" {
		fmt.Fprintf(buf, "%s\tParentUri: %q,\n", linePrefix, p.ParentUri)
	}
	if p.Loc != nil {
		fmt.Fprintf(buf, "%s\tLoc: &%s%s,\n", linePrefix, typePrefix, p.Loc.GnoLiteral(typePrefix, linePrefix+"\t"))
	}
	if p.CreatedAt != 0 {
		fmt.Fprintf(buf, "%s\tCreatedAt: %d,\n", linePrefix, p.CreatedAt)
	}
	if p.UpdatedAt != 0 {
		fmt.Fprintf(buf, "%s\tUpdatedAt: %d,\n", linePrefix, p.UpdatedAt)
	}
	if p.DeletedAt != 0 {
		fmt.Fprintf(buf, "%s\tDeletedAt: %d,\n", linePrefix, p.DeletedAt)
	}
	if len(p.Tags) != 0 {
		fmt.Fprintf(buf, "%s\tTags: {\n", linePrefix)
		linePrefix += "\t"
		for _, elem := range p.Tags {
			fmt.Fprintf(buf, "%s\t%q,\n", linePrefix, elem)
		}
		linePrefix = linePrefix[:len(linePrefix)-1]
		fmt.Fprintf(buf, "%s\t},\n", linePrefix)
	}
	switch val := p.Post.(type) {
	case *Post_Standard:
		fmt.Fprintf(buf, "%s\tPost: &%s,\n", linePrefix, val.Standard.GnoLiteral(typePrefix, linePrefix+"\t"))
	case *Post_Article:
		fmt.Fprintf(buf, "%s\tPost: &%s,\n", linePrefix, val.Article.GnoLiteral(typePrefix, linePrefix+"\t"))
	case *Post_Link:
		fmt.Fprintf(buf, "%s\tPost: &%s,\n", linePrefix, val.Link.GnoLiteral(typePrefix, linePrefix+"\t"))
	case *Post_Image:
		fmt.Fprintf(buf, "%s\tPost: &%s,\n", linePrefix, val.Image.GnoLiteral(typePrefix, linePrefix+"\t"))
	case *Post_Video:
		fmt.Fprintf(buf, "%s\tPost: &%s,\n", linePrefix, val.Video.GnoLiteral(typePrefix, linePrefix+"\t"))
	case *Post_Audio:
		fmt.Fprintf(buf, "%s\tPost: &%s,\n", linePrefix, val.Audio.GnoLiteral(typePrefix, linePrefix+"\t"))
	default:
		panic(errors.New("unknown post variant"))
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (p *PostView) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("PostView{\n")
	if p.Post != nil {
		fmt.Fprintf(buf, "%s\tPost: &%s%s,\n", linePrefix, typePrefix, p.Post.GnoLiteral(typePrefix, linePrefix+"\t"))
	}
	if len(p.Reactions) != 0 {
		fmt.Fprintf(buf, "%s\tReactions: {\n", linePrefix)
		linePrefix += "\t"
		for _, elem := range p.Reactions {
			fmt.Fprintf(buf, "%s\t&%s%s,\n", linePrefix, typePrefix, elem.GnoLiteral(typePrefix, linePrefix+"\t"))
		}
		linePrefix = linePrefix[:len(linePrefix)-1]
		fmt.Fprintf(buf, "%s\t},\n", linePrefix)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}

func (r *ReactionView) GnoLiteral(typePrefix string, linePrefix string) string {
	buf := &strings.Builder{}
	buf.WriteString(typePrefix)
	buf.WriteString("ReactionView{\n")
	if r.Icon != "" {
		fmt.Fprintf(buf, "%s\tIcon: %q,\n", linePrefix, r.Icon)
	}
	if r.Count != 0 {
		fmt.Fprintf(buf, "%s\tCount: %d,\n", linePrefix, r.Count)
	}
	if r.UserHasVoted != false {
		fmt.Fprintf(buf, "%s\tUserHasVoted: %t,\n", linePrefix, r.UserHasVoted)
	}
	buf.WriteString(linePrefix)
	buf.WriteString("}")
	return buf.String()
}
